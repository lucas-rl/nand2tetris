// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
	Mux16(a= instruction, b= outAlu, sel= instruction[15], out= outMux1);

    Not(in= instruction[15], out= commandA);
    Or(a= commandA, b= instruction[5], out= loadA);
    ARegister(in= outMux1, load= loadA,
    out= regA, out[0..14]= addressM);

    Mux16(a= regA, b= inM,
    sel= instruction[12], out= outMux2);

    ALU(
    x= regD,
    y= outMux2,
    zx= instruction[11],
    nx= instruction[10],
    zy= instruction[9],
    ny= instruction[8],
    f= instruction[7],
    no= instruction[6],
    out= outAlu, out= outM, zr= zeroAlu, ng= negAlu);

    And(a= instruction[15], b= instruction[4], out=loadD);
    DRegister(in= outAlu, load= loadD, out= regD);

    And(a= instruction[15], b= instruction[3], out= writeM);

    And(a= negAlu, b= instruction[2], out= negJ);
    And(a= zeroAlu, b= instruction[1], out= zeroJ);
    Or(a= negAlu, b= zeroAlu, out= notPos);
    Not(in= notPos, out= positivo);
    And(a= positivo, b= instruction[0], out= posJ);
    Or(a= negJ, b= zeroJ, out= partialJ);
    Or(a= partialJ, b= posJ, out= comandJump);
    And(a= instruction[15], b= comandJump, out= jump);

    PC(in= regA, load= jump, inc= true, reset= reset, out[0..14]= pc);

































}